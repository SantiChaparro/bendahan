{"ast":null,"code":"import { setAppointments } from \"./appointmentSlice\";\nimport { setCustomers } from \"../customers/customerSlice\";\nimport { createNewClient, createNewClientFail, emptyMessages } from \"../customers/newClientSlice\";\nimport { setServices, updatedService } from '../services/servicesSlice';\nimport { createNewService, createNewServiceFail, emptyServiceMessages } from \"../services/newServiceSlice\";\nimport { setProfessionals, modifyProfessional } from \"../professionals/professionalsSlice\";\nimport { createNewProfessional, createNewProfessionalFail, emptyErrorMessages } from '../professionals/newProfessionalSlice';\nimport axios from 'axios';\nexport const getAppointments = () => {\n  return async (dispatch, getState) => {\n    const resp = await axios.get('http://localhost:3001/appointment');\n    console.log(resp);\n    dispatch(setAppointments({\n      appointments: resp.data\n    }));\n  };\n};\nexport const getCustomers = () => {\n  return async (dispatch, getstate) => {\n    const resp = await axios.get('http://localhost:3001/client');\n    //console.log(resp)\n\n    dispatch(setCustomers({\n      customers: resp.data\n    }));\n  };\n};\nexport const updateCustomer = (clientData, dni) => {\n  return async (dispatch, getState) => {\n    try {\n      const resp = await axios.patch(`http://localhost:3001/client/${dni}`, clientData);\n      // Despacha una acci贸n para actualizar los clientes en el estado global de Redux\n      dispatch(updateCustomerSuccess(resp.data));\n      return resp;\n    } catch (error) {\n      console.error('Error updating customer:', error);\n    }\n  };\n};\n\n// Acci贸n para actualizar los clientes en el estado global de Redux\nexport const updateCustomerSuccess = updatedCustomerData => ({\n  type: 'customer/updateCustomerSuccess',\n  payload: updatedCustomerData\n});\nexport const postNewClient = (dni, name, DateOfBirth, phone, mail) => {\n  return async dispatch => {\n    try {\n      const resp = await axios.post('http://localhost:3001/client', {\n        dni,\n        name,\n        DateOfBirth,\n        phone,\n        mail\n      });\n      dispatch(createNewClient({\n        newClient: resp.data\n      }));\n      console.log(resp);\n    } catch (error) {\n      dispatch(createNewClientFail({\n        errorMessage: error.response.data.error\n      }));\n    }\n\n    //console.log(resp)\n  };\n};\nexport const cleanMessages = () => {\n  return dispatch => {\n    dispatch(emptyMessages({\n      errorMessage: null\n    }));\n  };\n};\nexport const getServices = () => {\n  return async dispatch => {\n    const resp = await axios.get('http://localhost:3001/service');\n    dispatch(setServices({\n      services: resp.data\n    }));\n    return resp.data;\n  };\n};\nexport const updateService = (serviceData, id) => {\n  return async dispatch => {\n    try {\n      const resp = await axios.patch(`http://localhost:3001/service/${id}`, serviceData);\n      console.log(resp);\n      dispatch(updatedService({\n        updatedService: resp.data\n      }));\n      return resp.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n};\nexport const postNewService = (service_name, cost) => {\n  return async dispatch => {\n    try {\n      const resp = await axios.post('http://localhost:3001/service', {\n        service_name,\n        cost\n      });\n      dispatch(createNewService({\n        NewService: resp.data\n      }));\n      console.log(resp.data);\n    } catch (error) {\n      dispatch(createNewServiceFail({\n        errorMessage: error.response.data.error\n      }));\n    }\n  };\n};\nexport const cleanNewService = () => {\n  return async dispatch => {\n    dispatch(emptyServiceMessages());\n  };\n};\nexport const getProfessionals = () => {\n  return async dispatch => {\n    const resp = await axios.get('http://localhost:3001/professional');\n    dispatch(setProfessionals({\n      professionals: resp.data\n    }));\n    console.log(resp.data);\n  };\n};\nexport const updateProfessional = (updateData, dni) => {\n  return async dispatch => {\n    const resp = await axios.patch(`http://localhost:3001/professional/${dni}`, updateData);\n    dispatch(modifyProfessional(updateData));\n    console.log(resp.data);\n    return resp.data;\n  };\n};\nexport const postNewProfessional = (dni, name, phone, mail, services) => {\n  return async dispatch => {\n    try {\n      const resp = await axios.post('http://localhost:3001/professional', {\n        dni,\n        name,\n        phone,\n        mail,\n        services\n      });\n      dispatch(createNewProfessional({\n        newProfessional: resp.data\n      }));\n      console.log(resp.data);\n    } catch (error) {\n      dispatch(createNewProfessionalFail({\n        errorMessage: error.response.data.error\n      }));\n    }\n  };\n};\nexport const emptyFormMessages = () => {\n  return async dispatch => {\n    dispatch(emptyErrorMessages({\n      errorMessage: ''\n    }));\n  };\n};","map":{"version":3,"names":["setAppointments","setCustomers","createNewClient","createNewClientFail","emptyMessages","setServices","updatedService","createNewService","createNewServiceFail","emptyServiceMessages","setProfessionals","modifyProfessional","createNewProfessional","createNewProfessionalFail","emptyErrorMessages","axios","getAppointments","dispatch","getState","resp","get","console","log","appointments","data","getCustomers","getstate","customers","updateCustomer","clientData","dni","patch","updateCustomerSuccess","error","updatedCustomerData","type","payload","postNewClient","name","DateOfBirth","phone","mail","post","newClient","errorMessage","response","cleanMessages","getServices","services","updateService","serviceData","id","message","postNewService","service_name","cost","NewService","cleanNewService","getProfessionals","professionals","updateProfessional","updateData","postNewProfessional","newProfessional","emptyFormMessages"],"sources":["C:/Users/Santi/Desktop/proyectos/bendahan/bendahan/client/src/redux/slices/appointments/thunks.js"],"sourcesContent":["import { setAppointments } from \"./appointmentSlice\";\r\nimport { setCustomers } from \"../customers/customerSlice\";\r\nimport { createNewClient , createNewClientFail , emptyMessages } from \"../customers/newClientSlice\";\r\nimport { setServices , updatedService } from '../services/servicesSlice';\r\nimport { createNewService , createNewServiceFail , emptyServiceMessages } from \"../services/newServiceSlice\";\r\nimport { setProfessionals , modifyProfessional } from \"../professionals/professionalsSlice\";\r\nimport { createNewProfessional , createNewProfessionalFail , emptyErrorMessages} from '../professionals/newProfessionalSlice';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nexport const getAppointments = () => {\r\n\r\n    return async(dispatch,getState) => {\r\n\r\n        const resp = await axios.get('http://localhost:3001/appointment');\r\n        console.log(resp);\r\n\r\n        dispatch(setAppointments({appointments: resp.data}));\r\n    };\r\n\r\n};\r\n\r\nexport const getCustomers = () => {\r\n\r\n    return async(dispatch,getstate) => {\r\n\r\n        const resp = await axios.get('http://localhost:3001/client');\r\n        //console.log(resp)\r\n\r\n        dispatch(setCustomers({customers: resp.data}));\r\n    }\r\n\r\n};\r\n\r\n\r\nexport const updateCustomer = (clientData, dni) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            const resp = await axios.patch(`http://localhost:3001/client/${dni}`, clientData);\r\n            // Despacha una acci贸n para actualizar los clientes en el estado global de Redux\r\n            dispatch(updateCustomerSuccess(resp.data));\r\n            return resp\r\n        } catch (error) {\r\n            console.error('Error updating customer:', error);\r\n        }\r\n    };\r\n};\r\n\r\n// Acci贸n para actualizar los clientes en el estado global de Redux\r\nexport const updateCustomerSuccess = (updatedCustomerData) => ({\r\n    type: 'customer/updateCustomerSuccess',\r\n    payload: updatedCustomerData\r\n});\r\n\r\n\r\nexport const postNewClient = (dni,name,DateOfBirth,phone,mail) => {\r\n   \r\n    return async (dispatch) => {\r\n\r\n        try {\r\n\r\n            const resp = await axios.post('http://localhost:3001/client',{dni,name,DateOfBirth,phone,mail});\r\n            dispatch(createNewClient({newClient: resp.data}));\r\n            console.log(resp)\r\n\r\n        } catch (error) {\r\n            dispatch(createNewClientFail({errorMessage: error.response.data.error}));\r\n        }\r\n        \r\n        //console.log(resp)\r\n       \r\n       \r\n    }\r\n};\r\n\r\nexport const cleanMessages = () => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(emptyMessages({errorMessage: null}))\r\n    }\r\n\r\n};\r\n\r\n\r\nexport const getServices = () => {\r\n\r\n    return async(dispatch) => {\r\n        \r\n        const resp = await axios.get('http://localhost:3001/service');\r\n        dispatch(setServices({services: resp.data}))\r\n        return resp.data\r\n\r\n    }\r\n\r\n};\r\n\r\nexport const updateService = (serviceData,id) => {\r\n\r\n    return async(dispatch) => {\r\n\r\n        try {\r\n            \r\n            const resp = await axios.patch(`http://localhost:3001/service/${id}`,serviceData);\r\n        console.log((resp));\r\n        dispatch(updatedService({updatedService: resp.data}))\r\n        return resp.data\r\n\r\n        } catch (error) {\r\n            console.log(error.message)\r\n        }\r\n\r\n        \r\n    }\r\n};\r\n\r\nexport const postNewService = (service_name,cost) => {\r\n\r\n    return async(dispatch) => {\r\n\r\n       try {\r\n\r\n            const resp = await axios.post('http://localhost:3001/service',{service_name,cost});\r\n            dispatch(createNewService({NewService: resp.data}))\r\n            console.log(resp.data);\r\n            \r\n       } catch (error) {\r\n            dispatch(createNewServiceFail({errorMessage: error.response.data.error}))\r\n       }    \r\n\r\n    }\r\n\r\n}\r\n\r\nexport const cleanNewService = () => {\r\n\r\n    return async(dispatch) => {\r\n        dispatch(emptyServiceMessages())\r\n    }\r\n\r\n};\r\n\r\nexport const getProfessionals = () => {\r\n\r\n   return async(dispatch) => {\r\n\r\n    const resp = await axios.get('http://localhost:3001/professional');\r\n    dispatch(setProfessionals({professionals: resp.data}));\r\n    console.log(resp.data)\r\n\r\n   }\r\n\r\n\r\n};\r\n\r\nexport const updateProfessional = (updateData,dni) => {\r\n\r\n    return async(dispatch) => {\r\n\r\n        const resp = await axios.patch(`http://localhost:3001/professional/${dni}`,updateData);\r\n        dispatch(modifyProfessional(updateData));\r\n        console.log(resp.data);\r\n        return resp.data;\r\n\r\n    }\r\n\r\n};\r\n\r\nexport const postNewProfessional = (dni,name,phone,mail,services) => {\r\n\r\n    return async(dispatch) => {\r\n\r\n        try {\r\n\r\n            const resp = await axios.post('http://localhost:3001/professional',{dni,name,phone,mail,services});\r\n            dispatch(createNewProfessional({newProfessional: resp.data}));\r\n            console.log(resp.data)\r\n\r\n        } catch (error) {\r\n\r\n            dispatch(createNewProfessionalFail({errorMessage: error.response.data.error}));\r\n            \r\n        }\r\n\r\n    \r\n    }\r\n\r\n\r\n};\r\n\r\nexport const emptyFormMessages = () => {\r\n\r\n    return async(dispatch) => {\r\n\r\n        dispatch(emptyErrorMessages({errorMessage: ''}))\r\n\r\n    }\r\n\r\n};\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}