{"ast":null,"code":"import { setAppointments } from \"./appointmentSlice\";\nimport { setCustomers } from \"../customers/customerSlice\";\nimport { createNewClient } from \"../customers/newClientSlice\";\nimport axios from 'axios';\nexport const getAppointments = () => {\n  return async (dispatch, getState) => {\n    const resp = await axios.get('http://localhost:3001/appointment');\n    console.log(resp);\n    dispatch(setAppointments({\n      appointments: resp.data\n    }));\n  };\n};\nexport const getCustomers = () => {\n  return async (dispatch, getstate) => {\n    const resp = await axios.get('http://localhost:3001/client');\n    //console.log(resp)\n\n    dispatch(setCustomers({\n      customers: resp.data\n    }));\n  };\n};\nexport const updateCustomer = (clientData, dni) => {\n  return async (dispatch, getState) => {\n    try {\n      const resp = await axios.patch(`http://localhost:3001/client/${dni}`, clientData);\n      // Despacha una acci贸n para actualizar los clientes en el estado global de Redux\n      dispatch(updateCustomerSuccess(resp.data));\n    } catch (error) {\n      console.error('Error updating customer:', error);\n    }\n  };\n};\n\n// Acci贸n para actualizar los clientes en el estado global de Redux\nexport const updateCustomerSuccess = updatedCustomerData => ({\n  type: 'customer/updateCustomerSuccess',\n  payload: updatedCustomerData\n});\nexport const postNewClient = (dni, name, DateOfBirth, phone, email) => {\n  return async dispatch => {\n    const resp = await axios.put('http://localhost:3001/client', {\n      dni,\n      name,\n      DateOfBirth,\n      phone,\n      email\n    });\n    dispatch(createNewClient({\n      newClient: resp.data\n    }));\n  };\n};","map":{"version":3,"names":["setAppointments","setCustomers","createNewClient","axios","getAppointments","dispatch","getState","resp","get","console","log","appointments","data","getCustomers","getstate","customers","updateCustomer","clientData","dni","patch","updateCustomerSuccess","error","updatedCustomerData","type","payload","postNewClient","name","DateOfBirth","phone","email","put","newClient"],"sources":["C:/Users/Santi/Desktop/proyectos/bendahan/bendahan/client/src/redux/slices/appointments/thunks.js"],"sourcesContent":["import { setAppointments } from \"./appointmentSlice\";\r\nimport { setCustomers } from \"../customers/customerSlice\";\r\nimport { createNewClient } from \"../customers/newClientSlice\";\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nexport const getAppointments = () => {\r\n\r\n    return async(dispatch,getState) => {\r\n\r\n        const resp = await axios.get('http://localhost:3001/appointment');\r\n        console.log(resp);\r\n\r\n        dispatch(setAppointments({appointments: resp.data}));\r\n    };\r\n\r\n};\r\n\r\nexport const getCustomers = () => {\r\n\r\n    return async(dispatch,getstate) => {\r\n\r\n        const resp = await axios.get('http://localhost:3001/client');\r\n        //console.log(resp)\r\n\r\n        dispatch(setCustomers({customers: resp.data}));\r\n    }\r\n\r\n};\r\n\r\n\r\nexport const updateCustomer = (clientData, dni) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            const resp = await axios.patch(`http://localhost:3001/client/${dni}`, clientData);\r\n            // Despacha una acci贸n para actualizar los clientes en el estado global de Redux\r\n            dispatch(updateCustomerSuccess(resp.data));\r\n        } catch (error) {\r\n            console.error('Error updating customer:', error);\r\n        }\r\n    };\r\n};\r\n\r\n// Acci贸n para actualizar los clientes en el estado global de Redux\r\nexport const updateCustomerSuccess = (updatedCustomerData) => ({\r\n    type: 'customer/updateCustomerSuccess',\r\n    payload: updatedCustomerData\r\n});\r\n\r\n\r\nexport const postNewClient = (dni,name,DateOfBirth,phone,email) => {\r\n\r\n    return async (dispatch) => {\r\n\r\n        const resp = await axios.put('http://localhost:3001/client',{dni,name,DateOfBirth,phone,email});\r\n\r\n        dispatch(createNewClient({newClient: resp.data}));\r\n        \r\n\r\n    }\r\n};"],"mappings":"AAAA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,OAAOC,KAAK,MAAM,OAAO;AAIzB,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAEjC,OAAO,OAAMC,QAAQ,EAACC,QAAQ,KAAK;IAE/B,MAAMC,IAAI,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,mCAAmC,CAAC;IACjEC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IAEjBF,QAAQ,CAACL,eAAe,CAAC;MAACW,YAAY,EAAEJ,IAAI,CAACK;IAAI,CAAC,CAAC,CAAC;EACxD,CAAC;AAEL,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAE9B,OAAO,OAAMR,QAAQ,EAACS,QAAQ,KAAK;IAE/B,MAAMP,IAAI,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,8BAA8B,CAAC;IAC5D;;IAEAH,QAAQ,CAACJ,YAAY,CAAC;MAACc,SAAS,EAAER,IAAI,CAACK;IAAI,CAAC,CAAC,CAAC;EAClD,CAAC;AAEL,CAAC;AAGD,OAAO,MAAMI,cAAc,GAAGA,CAACC,UAAU,EAAEC,GAAG,KAAK;EAC/C,OAAO,OAAOb,QAAQ,EAAEC,QAAQ,KAAK;IACjC,IAAI;MACA,MAAMC,IAAI,GAAG,MAAMJ,KAAK,CAACgB,KAAK,CAAE,gCAA+BD,GAAI,EAAC,EAAED,UAAU,CAAC;MACjF;MACAZ,QAAQ,CAACe,qBAAqB,CAACb,IAAI,CAACK,IAAI,CAAC,CAAC;IAC9C,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZZ,OAAO,CAACY,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMD,qBAAqB,GAAIE,mBAAmB,KAAM;EAC3DC,IAAI,EAAE,gCAAgC;EACtCC,OAAO,EAAEF;AACb,CAAC,CAAC;AAGF,OAAO,MAAMG,aAAa,GAAGA,CAACP,GAAG,EAACQ,IAAI,EAACC,WAAW,EAACC,KAAK,EAACC,KAAK,KAAK;EAE/D,OAAO,MAAOxB,QAAQ,IAAK;IAEvB,MAAME,IAAI,GAAG,MAAMJ,KAAK,CAAC2B,GAAG,CAAC,8BAA8B,EAAC;MAACZ,GAAG;MAACQ,IAAI;MAACC,WAAW;MAACC,KAAK;MAACC;IAAK,CAAC,CAAC;IAE/FxB,QAAQ,CAACH,eAAe,CAAC;MAAC6B,SAAS,EAAExB,IAAI,CAACK;IAAI,CAAC,CAAC,CAAC;EAGrD,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}